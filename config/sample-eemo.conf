# $Id$
#
# Extensible Ethernet Monitor (eemo) sample configuration file
#
# This example shows you how to configure eemo and add one or more modules
# that will be loaded upon startup

logging:
{
	# Set the loglevel
	loglevel = 3; 	# 0 = no logging, 1 = error, 
			# 2 = warning, 3 = info, 4 = debug

	# Where to log to; the settings below reflect default behaviour
	stdout = false; # do not log to stdout
	syslog = true; 	# log to syslog
	# Optionally, log to a file
	# filelog = "/var/log/eemo.log";
};

daemon:
{
	# Specify the PID file (optional, can also be specified on the
	# command line with the -p flag)
	#
	# pidfile = "/var/run/my-eemo.pid";

	# Prevent the daemon from forking (optional, can also be specified
	# on the command line with the -f flag)
	#
	# fork = false;
};

capture:
{
	# Specify the capture mode; valid values are:
	#
	# * capture	- local capture by putting a network interface in
	# 		  promiscuous mode (default)
	#
	# * file	- read a recorded PCAP from file; this mode is
	#		  implicitly selected if a PCAP file is specified
	#		  with -s on the command line
	#
	# * muxfeed	- acquire data from one or more feeds available
	#		  through an eemo multiplexer
	#
	#mode = "muxfeed";
	mode = "capture";

	# (optional) output statistics every <n> seconds
	#stats_interval = 60;

	# CAPTURE options
	#
	# Specify the Ethernet interfac to capture on (optional, can also be
	# specified on the command line with the -i flag and defaults to the
	# interface returned by pcap_lookupdev(3))
	#
	# interface = eth0;

	# FILE options
	#
	# Which file to read from; override with -s on the command line
	#
	# file = "mycapture.pcap";

	# MUXFEED options
	#
	# Specify the client certificate
	#client_cert = "./client-test/client_cert.pem";

	# Specify client certificate private key
	#client_key = "./client-test/client_cert.key";
	
	# Specify the directory that contains valid mux certificates for
	# server validation
	#cert_dir = "./mux-test";

	#
	# Specify the mux host
	#mux = "localhost";

	# Specify the mux client port
	#mux_port = 6970;

	# Specify the feeds to subscribe to
	#mux_feeds = [ "013a0cf78b28946037c0db9940430d21" ];
};

# This concludes the general configuration; modules are specified below:

modules:
{
	# Example configuration for the demo module (logs any UDP or TCP packet)
	demo:
	{
		# The line below is common to all modules and specifies
		# which shared library to load for this module
		lib = "/usr/local/lib/libeemo_demo.so";
	};

	# Example configuration for the DNS statistics module
	dnsstats:
	{
		lib = "/usr/local/lib/libeemo_dnsstats.so";

		# The configuration below is module specific
		modconf:
		{
                        # Which IP addresses do we receive queries on?
			listen_ips = [ "192.168.1.1", "::1" ];

			# How often should we output statistics?
			emit_interval = 60;

			# File to output statistics to
			stats_file = "/tmp/dnsstats.out";

			# Should the file be appended or overwritten?
			append_file = true;
		};
	};

	# Example configuration for the DNS IP/ICMP forward to sensor module
	dnssensorfw:
	{
		lib = "/usr/local/lib/libeemo_dnssensorfw.so";

		# The configuration below is module specific
		modconf:
		{
			# What is the maximum retry interval for connecting to the sensor
			sensor_reconnect_maxinterval = 1800;

			# What is the hostname of the sensor?
			sensor_hostname = "testserver.surfnet.nl";

			# What TCP port is the sensor listening on?
			sensor_port = 53531;
		};
	};

	# Add more modules below if required
	# ...
};
